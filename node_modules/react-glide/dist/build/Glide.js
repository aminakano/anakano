"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Glide = void 0;

var _react = _interopRequireDefault(require("react"));

var _Preloader = require("./Preloader");

require("./reactGlide.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Glide =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Glide, _React$Component);

  function Glide() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Glide);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Glide)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "autoPlay", void 0);

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: true,
      currentIndex: 0,
      imagesLoaded: false
    });

    _defineProperty(_assertThisInitialized(_this), "startTimer", function () {
      if (_this.props.autoPlay) {
        var _this$props$autoPlayS = _this.props.autoPlaySpeed,
            _autoPlaySpeed = _this$props$autoPlayS === void 0 ? 5000 : _this$props$autoPlayS;

        _this.autoPlay = setInterval(function () {
          return _this.goToNextSlide();
        }, _autoPlaySpeed);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "goToSelectedDot", function (index) {
      _this.setState({
        currentIndex: index
      });
    });

    _defineProperty(_assertThisInitialized(_this), "goToPrevSlide", function () {
      var children = _this.props.children;
      var currentIndex = _this.state.currentIndex;
      var lastSlide = _react.default.Children.toArray(children).length - 1;
      var nextIndex = currentIndex === 0 ? lastSlide : currentIndex - 1;

      _this.setState({
        currentIndex: nextIndex
      });
    });

    _defineProperty(_assertThisInitialized(_this), "goToNextSlide", function () {
      var children = _this.props.children;
      var currentIndex = _this.state.currentIndex;
      var lastSlide = _react.default.Children.toArray(children).length - 1;
      var nextIndex = currentIndex === lastSlide ? 0 : currentIndex + 1;

      _this.setState({
        currentIndex: nextIndex
      });
    });

    return _this;
  }

  _createClass(Glide, [{
    key: "componentWillUnMount",
    value: function componentWillUnMount() {
      clearInterval(this.props.autoPlaySpeed);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_prevProps, prevState) {
      var prevIndex = prevState.currentIndex;
      var currentIndex = this.state.currentIndex;
      var onSlideChange = this.props.onSlideChange;

      if (currentIndex !== prevIndex && onSlideChange) {
        onSlideChange();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var currentIndex = this.state.currentIndex;
      var _this$props = this.props,
          _this$props$infinite = _this$props.infinite,
          infinite = _this$props$infinite === void 0 ? false : _this$props$infinite,
          children = _this$props.children,
          _this$props$dots = _this$props.dots,
          dots = _this$props$dots === void 0 ? true : _this$props$dots;
      var styleProps = {
        height: this.props.height,
        width: this.props.width
      };
      return _react.default.createElement("div", {
        className: "glide--container",
        style: styleProps
      }, _react.default.createElement(_Preloader.Preloader, _extends({
        startTimer: function startTimer() {
          return _this2.startTimer();
        }
      }, this.props, this.state), children), (infinite || currentIndex !== 0) && _react.default.createElement("button", {
        className: "glide--prev-btn",
        onClick: function onClick() {
          clearInterval(_this2.autoPlay);

          _this2.goToPrevSlide();
        }
      }, "\u276E"), (infinite || currentIndex !== children.length - 1) && _react.default.createElement("button", {
        className: "glide--next-btn",
        onClick: function onClick() {
          clearInterval(_this2.autoPlay);

          _this2.goToNextSlide();
        }
      }, "\u276F"), dots && _react.default.createElement("section", {
        className: "glide--dots"
      }, _react.default.Children.map(children, function (child, index) {
        return _react.default.createElement("span", {
          key: index,
          className: currentIndex === index ? 'active-dot' : 'inactive-dot',
          onClick: function onClick() {
            clearInterval(_this2.autoPlay);

            _this2.goToSelectedDot(index);
          }
        }, "\xB7");
      })));
    }
  }]);

  return Glide;
}(_react.default.Component);

exports.Glide = Glide;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9HbGlkZS50c3giXSwibmFtZXMiOlsiR2xpZGUiLCJsb2FkaW5nIiwiY3VycmVudEluZGV4IiwiaW1hZ2VzTG9hZGVkIiwicHJvcHMiLCJhdXRvUGxheSIsImF1dG9QbGF5U3BlZWQiLCJzZXRJbnRlcnZhbCIsImdvVG9OZXh0U2xpZGUiLCJpbmRleCIsInNldFN0YXRlIiwiY2hpbGRyZW4iLCJzdGF0ZSIsImxhc3RTbGlkZSIsIlJlYWN0IiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwibGVuZ3RoIiwibmV4dEluZGV4IiwiY2xlYXJJbnRlcnZhbCIsIl9wcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJwcmV2SW5kZXgiLCJvblNsaWRlQ2hhbmdlIiwiaW5maW5pdGUiLCJkb3RzIiwic3R5bGVQcm9wcyIsImhlaWdodCIsIndpZHRoIiwic3RhcnRUaW1lciIsImdvVG9QcmV2U2xpZGUiLCJtYXAiLCJjaGlsZCIsImdvVG9TZWxlY3RlZERvdCIsIkNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWtCTUEsSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NERBR2dCO0FBQ2xCQyxNQUFBQSxPQUFPLEVBQUUsSUFEUztBQUVsQkMsTUFBQUEsWUFBWSxFQUFFLENBRkk7QUFHbEJDLE1BQUFBLFlBQVksRUFBRTtBQUhJLEs7O2lFQW9CUCxZQUFNO0FBQ2pCLFVBQUksTUFBS0MsS0FBTCxDQUFXQyxRQUFmLEVBQXlCO0FBQUEsb0NBQ1UsTUFBS0QsS0FEZixDQUNmRSxhQURlO0FBQUEsWUFDZkEsY0FEZSxzQ0FDQyxJQUREOztBQUV2QixjQUFLRCxRQUFMLEdBQWdCRSxXQUFXLENBQ3pCO0FBQUEsaUJBQU0sTUFBS0MsYUFBTCxFQUFOO0FBQUEsU0FEeUIsRUFFekJGLGNBRnlCLENBQTNCO0FBSUQ7QUFDRixLOztzRUFFaUIsVUFBQ0csS0FBRCxFQUFtQjtBQUNuQyxZQUFLQyxRQUFM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QUFFRSxRQUFBLE9BQU8sRUFBRSxtQkFBTTtBQUNiRSxVQUFBQSxhQUFhLENBQUMsTUFBSSxDQUFDZCxRQUFOLENBQWI7O0FBQ0EsVUFBQSxNQUFJLENBQUNHLGFBQUw7QUFDRDtBQUxILGtCQXZCSixFQWtDR2lCLElBQUksSUFDSDtBQUFTLFFBQUEsU0FBUyxFQUFDO0FBQW5CLFNBQ0dYLGVBQU1DLFFBQU4sQ0FBZWdCLEdBQWYsQ0FBbUJwQixRQUFuQixFQUE2QixVQUFDcUIsS0FBRCxFQUFRdkIsS0FBUjtBQUFBLGVBQzVCO0FBQ0UsVUFBQSxHQUFHLEVBQUVBLEtBRFA7QUFFRSxVQUFBLFNBQVMsRUFBR1AsWUFBWSxLQUFLTyxLQUFqQixHQUF5QixZQUF6QixHQUF3QyxjQUZ0RDtBQUdFLFVBQUEsT0FBTyxFQUFFLG1CQUFNO0FBQ2JVLFlBQUFBLGFBQWEsQ0FBQyxNQUFJLENBQUNkLFFBQU4sQ0FBYjs7QUFDQSxZQUFBLE1BQUksQ0FBQzRCLGVBQUwsQ0FBcUJ4QixLQUFyQjtBQUNEO0FBTkgsa0JBRDRCO0FBQUEsT0FBN0IsQ0FESCxDQW5DSixDQURGO0FBcUREOzs7O0VBNUhpQkssZUFBTW9CLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUmVhY3RDaGlsZCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IFByZWxvYWRlciB9IGZyb20gJy4vUHJlbG9hZGVyJztcclxuaW1wb3J0ICcuL3JlYWN0R2xpZGUuY3NzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgR2xpZGVTdGF0ZSB7XHJcbiAgbG9hZGluZzogdHJ1ZTtcclxuICBjdXJyZW50SW5kZXg6IG51bWJlcjtcclxuICBpbWFnZXNMb2FkZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgR2xpZGVQcm9wcyB7XHJcbiAgYXV0b1BsYXk/OiBib29sZWFuO1xyXG4gIGF1dG9QbGF5U3BlZWQ/OiBudW1iZXI7XHJcbiAgZG90cz86IGJvb2xlYW47XHJcbiAgaGVpZ2h0PzogbnVtYmVyO1xyXG4gIGluZmluaXRlPzogYm9vbGVhbjtcclxuICB3aWR0aDogbnVtYmVyO1xyXG4gIG9uU2xpZGVDaGFuZ2U/OiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5jbGFzcyBHbGlkZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxHbGlkZVByb3BzLCBHbGlkZVN0YXRlPiB7XHJcbiAgYXV0b1BsYXk6IE5vZGVKUy5UaW1lb3V0O1xyXG5cclxuICBzdGF0ZTogR2xpZGVTdGF0ZSA9IHtcclxuICAgIGxvYWRpbmc6IHRydWUsXHJcbiAgICBjdXJyZW50SW5kZXg6IDAsXHJcbiAgICBpbWFnZXNMb2FkZWQ6IGZhbHNlXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5Nb3VudCgpIHtcclxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wcm9wcy5hdXRvUGxheVNwZWVkKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlKF9wcmV2UHJvcHM6IEdsaWRlUHJvcHMsIHByZXZTdGF0ZTogR2xpZGVTdGF0ZSkge1xyXG4gICAgY29uc3QgeyBjdXJyZW50SW5kZXg6IHByZXZJbmRleCB9ID0gcHJldlN0YXRlO1xyXG4gICAgY29uc3QgeyBjdXJyZW50SW5kZXggfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7IG9uU2xpZGVDaGFuZ2UgfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgaWYgKGN1cnJlbnRJbmRleCAhPT0gcHJldkluZGV4ICYmIG9uU2xpZGVDaGFuZ2UpIHtcclxuICAgICAgb25TbGlkZUNoYW5nZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhcnRUaW1lciA9ICgpID0+IHtcclxuICAgIGlmICh0aGlzLnByb3BzLmF1dG9QbGF5KSB7XHJcbiAgICAgIGNvbnN0IHsgYXV0b1BsYXlTcGVlZCA9IDUwMDAgfSA9IHRoaXMucHJvcHNcclxuICAgICAgdGhpcy5hdXRvUGxheSA9IHNldEludGVydmFsKFxyXG4gICAgICAgICgpID0+IHRoaXMuZ29Ub05leHRTbGlkZSgpLFxyXG4gICAgICAgIGF1dG9QbGF5U3BlZWRcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdvVG9TZWxlY3RlZERvdCA9IChpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudEluZGV4OiBpbmRleCB9KTtcclxuICB9XHJcblxyXG4gIGdvVG9QcmV2U2xpZGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBjdXJyZW50SW5kZXggfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgY29uc3QgbGFzdFNsaWRlID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbikubGVuZ3RoIC0gMVxyXG4gICAgY29uc3QgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ID09PSAwID8gbGFzdFNsaWRlIDogY3VycmVudEluZGV4IC0gMTtcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudEluZGV4OiBuZXh0SW5kZXggfSlcclxuICB9XHJcblxyXG4gIGdvVG9OZXh0U2xpZGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBjdXJyZW50SW5kZXggfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgY29uc3QgbGFzdFNsaWRlID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbikubGVuZ3RoIC0gMVxyXG4gICAgY29uc3QgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ID09PSBsYXN0U2xpZGUgPyAwIDogY3VycmVudEluZGV4ICsgMTtcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudEluZGV4OiBuZXh0SW5kZXggfSlcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgY3VycmVudEluZGV4IH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgaW5maW5pdGUgPSBmYWxzZSxcclxuICAgICAgY2hpbGRyZW4sXHJcbiAgICAgIGRvdHMgPSB0cnVlXHJcbiAgICB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBjb25zdCBzdHlsZVByb3BzID0ge1xyXG4gICAgICBoZWlnaHQ6IHRoaXMucHJvcHMuaGVpZ2h0LFxyXG4gICAgICB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCxcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImdsaWRlLS1jb250YWluZXJcIiBzdHlsZT17c3R5bGVQcm9wc30+XHJcbiAgICAgICAgPFByZWxvYWRlclxyXG4gICAgICAgICAgc3RhcnRUaW1lcj17KCkgPT4gdGhpcy5zdGFydFRpbWVyKCl9XHJcbiAgICAgICAgICB7Li4udGhpcy5wcm9wc31cclxuICAgICAgICAgIHsuLi50aGlzLnN0YXRlfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L1ByZWxvYWRlcj5cclxuXHJcblxyXG4gICAgICAgIHsoaW5maW5pdGUgfHwgY3VycmVudEluZGV4ICE9PSAwKSAmJlxyXG4gICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJnbGlkZS0tcHJldi1idG5cIlxyXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmF1dG9QbGF5KVxyXG4gICAgICAgICAgICAgIHRoaXMuZ29Ub1ByZXZTbGlkZSgpXHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgICYjMTAwOTQ7XHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHsoaW5maW5pdGUgfHwgY3VycmVudEluZGV4ICE9PSAoY2hpbGRyZW4gYXMgUmVhY3RDaGlsZFtdKS5sZW5ndGggLSAxKSAmJlxyXG4gICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJnbGlkZS0tbmV4dC1idG5cIlxyXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmF1dG9QbGF5KVxyXG4gICAgICAgICAgICAgIHRoaXMuZ29Ub05leHRTbGlkZSgpO1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICAmIzEwMDk1O1xyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB7ZG90cyAmJlxyXG4gICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZ2xpZGUtLWRvdHNcIiA+XHJcbiAgICAgICAgICAgIHtSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+XHJcbiAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyhjdXJyZW50SW5kZXggPT09IGluZGV4ID8gJ2FjdGl2ZS1kb3QnIDogJ2luYWN0aXZlLWRvdCcpfVxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuYXV0b1BsYXkpXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZ29Ub1NlbGVjdGVkRG90KGluZGV4KVxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAmbWlkZG90O1xyXG4gICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEdsaWRlIH1cclxuIl19