"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Preloader = void 0;

var _react = _interopRequireWildcard(require("react"));

var _LoadingSpinner = require("./LoadingSpinner");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Preloader =
/*#__PURE__*/
function (_Component) {
  _inherits(Preloader, _Component);

  function Preloader() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Preloader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Preloader)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "urls", []);

    _defineProperty(_assertThisInitialized(_this), "state", {
      loading: true,
      done: false,
      loadCount: 0
    });

    _defineProperty(_assertThisInitialized(_this), "preloadImages", function () {
      var urls = _this.getImageUrls();

      if (urls.length > 0) {
        urls.map(function (src) {
          var newImage = new Image();
          newImage.src = src;
          newImage.onload = _this.updateLoadCount;
        });
      }

      if (urls.length === 0) {
        _this.updateLoadState();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getImageUrls", function () {
      var urlResults = [];
      var children = _this.props.children;

      _react.default.Children.map(children, function (child, index) {
        var res = _this.traverseElementTree(child);

        urlResults = [].concat(_toConsumableArray(urlResults), _toConsumableArray(res));
      });

      _this.urls = _toConsumableArray(urlResults);
      return urlResults;
    });

    _defineProperty(_assertThisInitialized(_this), "traverseElementTree", function (element) {
      var results = [];

      if (element.type === 'img') {
        results.push(element.props.src);
      }

      if (element.props && element.props.children) {
        return _this.traverseElementTree(element.props.children);
      }

      return results;
    });

    _defineProperty(_assertThisInitialized(_this), "updateLoadCount", function () {
      return _this.setState(function (prevState) {
        return {
          loadCount: prevState.loadCount + 1
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "updateLoadState", function () {
      return _this.setState(function (prevState) {
        return {
          done: true,
          loading: false
        };
      });
    });

    return _this;
  }

  _createClass(Preloader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.preloadImages();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var loadCountUpdated = prevState.loadCount !== this.state.loadCount;
      var allLoaded = this.state.loadCount === this.urls.length;
      var done = this.state.done !== prevState.done && this.state.done;

      if (loadCountUpdated && allLoaded) {
        this.updateLoadState();
      }

      if (done && this.props.autoPlay) {
        this.props.startTimer();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          currentIndex = _this$props.currentIndex;
      var _this$state = this.state,
          loading = _this$state.loading,
          done = _this$state.done;
      return _react.default.createElement(_react.default.Fragment, null, loading && _react.default.createElement(_LoadingSpinner.LoadingSpinner, {
        width: this.props.width
      }), done && _react.default.Children.map(children, function (child, index) {
        var className = currentIndex === index ? 'current' : '';
        return child && _react.default.createElement(child.type, _extends({
          className: "glide--item ".concat(className)
        }, child.props));
      }));
    }
  }]);

  return Preloader;
}(_react.Component);

exports.Preloader = Preloader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QcmVsb2FkZXIudHN4Il0sIm5hbWVzIjpbIlByZWxvYWRlciIsImxvYWRpbmciLCJkb25lIiwibG9hZENvdW50IiwidXJscyIsImdldEltYWdlVXJscyIsImxlbmd0aCIsIm1hcCIsInNyYyIsIm5ld0ltYWdlIiwiSW1hZ2UiLCJvbmxvYWQiLCJ1cGRhdGVMb2FkQ291bnQiLCJ1cGRhdGVMb2FkU3RhdGUiLCJ1cmxSZXN1bHRzIiwiY2hpbGRyZW4iLCJwcm9wcyIsIlJlYWN0IiwiQ2hpbGRyZW4iLCJjaGlsZCIsImluZGV4IiwicmVzIiwidHJhdmVyc2VFbGVtZW50VHJlZSIsImVsZW1lbnQiLCJyZXN1bHRzIiwidHlwZSIsInB1c2giLCJzZXRTdGF0ZSIsInByZXZTdGF0ZSIsInByZWxvYWRJbWFnZXMiLCJwcmV2UHJvcHMiLCJsb2FkQ291bnRVcGRhdGVkIiwic3RhdGUiLCJhbGxMb2FkZWQiLCJhdXRvUGxheSIsInN0YXJ0VGltZXIiLCJjdXJyZW50SW5kZXgiLCJ3aWR0aCIsImNsYXNzTmFtZSIsIkNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBSU1BLFM7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyREFDYSxFOzs0REFFTztBQUN0QkMsTUFBQUEsT0FBTyxFQUFFLElBRGE7QUFFdEJDLE1BQUFBLElBQUksRUFBRSxLQUZnQjtBQUd0QkMsTUFBQUEsU0FBUyxFQUFFO0FBSFcsSzs7b0VBeUJSLFlBQU07QUFDcEIsVUFBTUMsSUFBSSxHQUFHLE1BQUtDLFlBQUwsRUFBYjs7QUFFQSxVQUFJRCxJQUFJLENBQUNFLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQkYsUUFBQUEsSUFBSSxDQUFDRyxHQUFMLENBQVMsVUFBQUMsR0FBRyxFQUFJO0FBQ2QsY0FBTUMsUUFBUSxHQUFHLElBQUlDLEtBQUosRUFBakI7QUFDQUQsVUFBQUEsUUFBUSxDQUFDRCxHQUFU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QUFsQyxRQURkLEVBRUduQyxJQUFJLElBQ0hlLGVBQU1DLFFBQU4sQ0FBZVgsR0FBZixDQUFtQlEsUUFBbkIsRUFBNkIsVUFBQ0ksS0FBRCxFQUFzQkMsS0FBdEIsRUFBZ0M7QUFDM0QsWUFBTWtCLFNBQVMsR0FBR0YsWUFBWSxLQUFLaEIsS0FBakIsR0FBeUIsU0FBekIsR0FBcUMsRUFBdkQ7QUFDQSxlQUFPRCxLQUFLLElBQ1YsNkJBQUMsS0FBRCxDQUFPLElBQVA7QUFBWSxVQUFBLFNBQVMsd0JBQWlCbUIsU0FBakI7QUFBckIsV0FBdURuQixLQUFLLENBQUNILEtBQTdELEVBREY7QUFJRCxPQU5ELENBSEosQ0FERjtBQWNEOzs7O0VBN0ZxQnVCLGdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgTG9hZGluZ1NwaW5uZXIgfSBmcm9tICcuL0xvYWRpbmdTcGlubmVyJztcclxuaW1wb3J0IHsgUHJlbG9hZGVyUHJvcHMsIFByZWxvYWRlclN0YXRlIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5cclxuY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50PFByZWxvYWRlclByb3BzLCBQcmVsb2FkZXJTdGF0ZT4ge1xyXG4gIHVybHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIHN0YXRlOiBQcmVsb2FkZXJTdGF0ZSA9IHtcclxuICAgIGxvYWRpbmc6IHRydWUsXHJcbiAgICBkb25lOiBmYWxzZSxcclxuICAgIGxvYWRDb3VudDogMCxcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5wcmVsb2FkSW1hZ2VzKClcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IFByZWxvYWRlclByb3BzLCBwcmV2U3RhdGU6IFByZWxvYWRlclN0YXRlKSB7XHJcbiAgICBjb25zdCBsb2FkQ291bnRVcGRhdGVkID0gcHJldlN0YXRlLmxvYWRDb3VudCAhPT0gdGhpcy5zdGF0ZS5sb2FkQ291bnQ7XHJcbiAgICBjb25zdCBhbGxMb2FkZWQgPSB0aGlzLnN0YXRlLmxvYWRDb3VudCA9PT0gdGhpcy51cmxzLmxlbmd0aDtcclxuICAgIGNvbnN0IGRvbmUgPSB0aGlzLnN0YXRlLmRvbmUgIT09IHByZXZTdGF0ZS5kb25lICYmIHRoaXMuc3RhdGUuZG9uZVxyXG5cclxuICAgIGlmIChsb2FkQ291bnRVcGRhdGVkICYmIGFsbExvYWRlZCkge1xyXG4gICAgICB0aGlzLnVwZGF0ZUxvYWRTdGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkb25lICYmIHRoaXMucHJvcHMuYXV0b1BsYXkpIHtcclxuICAgICAgdGhpcy5wcm9wcy5zdGFydFRpbWVyKClcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBwcmVsb2FkSW1hZ2VzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdXJscyA9IHRoaXMuZ2V0SW1hZ2VVcmxzKClcclxuXHJcbiAgICBpZiAodXJscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHVybHMubWFwKHNyYyA9PiB7XHJcbiAgICAgICAgY29uc3QgbmV3SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBuZXdJbWFnZS5zcmMgPSBzcmM7XHJcbiAgICAgICAgbmV3SW1hZ2Uub25sb2FkID0gdGhpcy51cGRhdGVMb2FkQ291bnRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHVybHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlTG9hZFN0YXRlKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEltYWdlVXJscyA9ICgpID0+IHtcclxuICAgIGxldCB1cmxSZXN1bHRzOiBzdHJpbmdbXSA9IFtdXHJcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkOiBSZWFjdEVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IHRoaXMudHJhdmVyc2VFbGVtZW50VHJlZShjaGlsZClcclxuICAgICAgdXJsUmVzdWx0cyA9IFsuLi51cmxSZXN1bHRzLCAuLi5yZXNdO1xyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLnVybHMgPSBbLi4udXJsUmVzdWx0c11cclxuICAgIHJldHVybiB1cmxSZXN1bHRzXHJcbiAgfVxyXG5cclxuICB0cmF2ZXJzZUVsZW1lbnRUcmVlID0gKGVsZW1lbnQ6IFJlYWN0RWxlbWVudCk6IHN0cmluZ1tdID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBpZiAoZWxlbWVudC50eXBlID09PSAnaW1nJykge1xyXG4gICAgICByZXN1bHRzLnB1c2goZWxlbWVudC5wcm9wcy5zcmMpXHJcbiAgICB9XHJcbiAgICBpZiAoZWxlbWVudC5wcm9wcyAmJiBlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnRyYXZlcnNlRWxlbWVudFRyZWUoZWxlbWVudC5wcm9wcy5jaGlsZHJlbilcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHRzXHJcbiAgfVxyXG5cclxuICB1cGRhdGVMb2FkQ291bnQgPSAoKSA9PlxyXG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgbG9hZENvdW50OiBwcmV2U3RhdGUubG9hZENvdW50ICsgMSB9KSk7XHJcbiAgO1xyXG5cclxuICB1cGRhdGVMb2FkU3RhdGUgPSAoKSA9PlxyXG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgZG9uZTogdHJ1ZSwgbG9hZGluZzogZmFsc2UgfSkpO1xyXG4gIDtcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBjaGlsZHJlbiwgY3VycmVudEluZGV4IH0gPSB0aGlzLnByb3BzXHJcbiAgICBjb25zdCB7IGxvYWRpbmcsIGRvbmUgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8PlxyXG4gICAgICAgIHtsb2FkaW5nICYmIDxMb2FkaW5nU3Bpbm5lciB3aWR0aD17dGhpcy5wcm9wcy53aWR0aH0gLz59XHJcbiAgICAgICAge2RvbmUgJiZcclxuICAgICAgICAgIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkOiBSZWFjdEVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGN1cnJlbnRJbmRleCA9PT0gaW5kZXggPyAnY3VycmVudCcgOiAnJ1xyXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQgJiYgKFxyXG4gICAgICAgICAgICAgIDxjaGlsZC50eXBlIGNsYXNzTmFtZT17YGdsaWRlLS1pdGVtICR7Y2xhc3NOYW1lfWB9IHsuLi5jaGlsZC5wcm9wc30gLz5cclxuXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICA8Lz5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFByZWxvYWRlciB9Il19